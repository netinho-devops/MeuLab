#!/bin/ksh  
####################################
# Author: Rajkumar Nayeni, Eitan Corech, Lior Moldovan
# Purpose: To genrate Release mail
#
#
####################################


####################################################
#
#variableDefinition
#
##################################################
variableDefinition()
{

HOMEDIR="/vivnas/viv/vivtools"
SCRIPTHOMEDIR="`echo $HOMEDIR`/Scripts"
AMCDBString="tooladm/tooladm@VV9TOOLS"
PROJ_ABBR=viv

# Ping Script Locations
abpScriptPath="~/JEE/ABPProduct/scripts/ABP-FULL"
abpPingScript="pingABPServer.sh"
omsScriptPath="~/JEE/OMS/scripts/OmsDomain/OmsServer"
omsPingScript="pingOmsServer.sh"
crmScriptPath="~/JEE/CRMProduct/scripts/CRMDomain/CRMServer"
crmPingScript="pingCRMServer.sh"
uifScriptPath="~/JEE/CRMProduct/scripts/UIFDomain/UIFServer"
uifPingScript="pingUIFWebLogic.sh"
slrScriptPath="~/JEE/SolrProduct/scripts/SolrDomain_SolrServer/SolrServer"
slrPingScript="pingSolrServer.sh"
amssScriptPath="~/JEE/AMSSProduct/scripts/AMSSFullDomain/AMSSFullServer"
amssPingScript="pingAMSSFullServer.sh"
uxfScriptPath="~/JEE/LightSaber/scripts/LightSaberDomain"
uxfPingScript="pingLightSaberServer.sh"
slraScriptPath="~/JEE/SolrProduct/scripts/SolrDomain_SolrServer/SolrServer"
slraPingScript="pingSolrServer.sh"

TOOL_URL="http://indlin3662:5000"
CRM_STORAGE=""

EMAIL_TO="VIVODCCInfraMPSINT@int.amdocs.com"
#EMAIL_TO="vijaysa@amdocs.com"
EMAIL_FROM="VIVODCCInfraMPSINT@int.amdocs.com"
#EMAIL_SUBJECT="${PROJECT} V${VERSION} - SWP #${SWP} - Env ${PHASE} #${ENV_NUMBER} - BSS Release Environment Report"
if [[ "${IS_GOLDEN}" = "N" ]]
then
	EMAIL_SUBJECT="VIVO V${VERSION} SWP#${SWP} ICM Build#${ICM_BUILD} Env #${ENV_NUMBER} - Release Environment Report"
else
	EMAIL_SUBJECT="VIVO V${VERSION} SWP#${SWP} ICM Build#${ICM_BUILD} Env #${ENV_NUMBER} - IaaS Golden Release Environment Report"
fi
TEAM="VIVO Infra Integration"

ABP_TIGER_CONNECT=TIGER_REP_ABP/TIGER_REP_ABP@VV9TOOLS
OMS_TIGER_CONNECT=TIGER_REP_OMS/TIGER_REP_OMS@VV9TOOLS
SE_TIGER_CONNECT=TIGER_REP_SE/TIGER_REP_SE@VV9TOOLS
AMSS_TIGER_CONNECT=TIGER_REP_ECR/TIGER_REP_ECR@VV9TOOLS

. ${HOMEDIR}/.profile >/dev/null 2>&1 </dev/null

}

####################################################
#
#FindUnixBox
#
##################################################

FindUnixBox()
{
ENV_NUMBER=$1
PRODUCT=$2
VERSION=$3
PHASE=$4

UNIXBOX=`sqlplus -s ${AMCDBString} << EOF 
set hea off feed off pagesize 0
select PROPERTY_VALUE 
from   GNS_ENV_PROPERTIES 
where  ENV_ID = ${ENV_NUMBER}  
and    PRODUCT_ENV_ID = (select PRODUCT_ENV_ID 
                         from   GNS_PRODUCT_ENV_MODEL 
                         where PRODUCT_ID = (select PRODUCT_ID 
                                             from   GNS_PRODUCT 
                                             where  PRODUCT_NAME = '${PRODUCT}' )  
                        and  VERSION_ID  =  (select VERSION_ID
                                             from   GNS_VERSION 
                                             where  VERSION_NUMBER = ${VERSION} )  
                        and  PHASE_ID    =  (select PHASE_ID 
                                             from   GNS_ENV_PHASE 
                                             where  ENV_PHASE = '${PHASE}')) 
                       and PROPERTY_NAME =  'host' ;
exit;
EOF`

}

####################################################
#
#showEnvironmentDetails
#
##################################################
showEnvironmentDetails()
{
PRODUCT=`echo ${1} | tr '[A-Z]' '[a-z]'`
UNIXUSER=""
UNIXBOX=""
STORAGE=""

case ${PRODUCT} in
	abp)
		UNIXUSER=${PROJ_ABBR}abp${ENV_NUMBER}
		PRODUCT='enb'
		;;
	amss)
		UNIXUSER=vivmcs${ENV_NUMBER}
		;;
	slroms)
		UNIXUSER=vivslo${ENV_NUMBER}
		;;
	slrams)
		UNIXUSER=vivsla${ENV_NUMBER}
		;;
	*)
		UNIXUSER=${PROJ_ABBR}${PRODUCT}${ENV_NUMBER}
		;;
esac

if [[ "${PHASE}" = "CST" ]]
then
        if [[ "${PRODUCT}" = "enb" ]]
        then
                UNIXUSER=abpwrk1
        elif [[ "${PRODUCT}" = "amss" ]]
        then
                UNIXUSER=amswrk1
        elif [[ "${PRODUCT}" = "slroms" ]]
        then
                UNIXUSER=slroms1
        elif [[ "${PRODUCT}" = "slrams" ]]
        then
                UNIXUSER=slrams1
        else
                UNIXUSER=${PRODUCT}wrk1
        fi
fi

FindUnixBox ${ENV_NUMBER} ${PRODUCT} ${VERSION} ${PHASE}

case $1 in
        ABP)
               	if [[ "${PHASE}" = "CST" ]] 
				then
					export STORAGE=`ssh -q ${UNIXUSER}@${UNIXBOX} -n "ls -alrt ~/abp_home| cut -d"/" -f9"`
				else
					export STORAGE=`ssh -q ${UNIXUSER}@${UNIXBOX} -n "ls -alrt ~/abp_home| cut -d"/" -f10"`
				fi
                ;;
        CRM)
	        #V#export version=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cd .xpi/repository/topologies; grep ST_CRM * |cut -d"/" -f5 | cut -d "_" -f4 | sed "s/B//" | uniq "`
	        export version=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cd .xpi/repository/topologies; grep ST_CRM * |cut -d"/" -f3 | uniq "`
		export build_number=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cd .xpi/repository/topologies; grep ST_CRM * | cut -d"/" -f5 | cut -d "_" -f4 | sed "s/B//" | uniq"`
                export STORAGE=ST_CRM_V${version}_B${build_number}
		CRM_STORAGE=ST_CRM_V${version}_B${build_number}
                ;;
        OMS)
                export version=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cd .xpi/repository/topologies; grep ST_O * | cut -d"/" -f5 | cut -d "_" -f3 | sed "s/V//" | uniq"`
		export build_number=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cd .xpi/repository/topologies; grep ST_O * | cut -d"/" -f5 | cut -d "_" -f4 | sed "s/B//" | uniq"`
                export STORAGE=ST_OMS_V${version}_B${build_number}
                ;;
	SLROMS)
                export version=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cat ~/storage_root/packages/slroms_build.number | grep 'build.version' | cut -d '=' -f2 | cut -d "v" -f2"`
                export build_number=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cat ~/storage_root/packages/slroms_build.number | grep 'build.number' | cut -d '=' -f2 | head -1"`
                export STORAGE=ST_SLROMS_${version}_B${build_number}
                ;;
	SLRAMS)
                export version=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cat ~/storage_root/packages/slrams_build.number | grep 'build.version' | cut -d '=' -f2 | cut -d "v" -f2"`
                export build_number=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cat ~/storage_root/packages/slrams_build.number | grep 'build.number' | cut -d '=' -f2 | head -1"`
                export STORAGE=ST_SLRAMS_${version}_B${build_number}
                ;;
    AMSS)
				export version=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cd .xpi/repository/topologies; grep ST_O * | cut -d"/" -f5 | cut -d "_" -f3 | sed "s/V//" | uniq"`
				export build_number=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cd .xpi/repository/topologies; grep ST_O * | cut -d"/" -f5 | cut -d "_" -f4 | sed "s/B//" | uniq"`
				export STORAGE=ST_AMSS_${version}_B${build_number}
				;; 
	*)
                echo "please give product Name $1"
                exit 1
                ;;
esac

if [ "`expr ${ROWNUMBER} % 2 `" == "0" ]
then
        echo "<tr bgcolor='A5D5E2'>"
else
        echo "<tr bgcolor='D2EAF1'>"
fi

echo "<td bgcolor='4BACC6'> <b> `echo ${PRODUCT} | tr '[a-z]' '[A-Z]'` </b> </td>"
echo "<td> ${UNIXUSER}/Unix11! </td>"
echo "<td> ${UNIXBOX} </td>"
echo "<td> ${STORAGE} </td>"
echo "</tr> "

ROWNUMBER=`expr ${ROWNUMBER} + 1`
}

#########################################################################
#
# showEnvironmentDumps
#
#########################################################################
showEnvironmentDumps()
{

ABP_BUILD_NUMBER_S=`sqlplus -s $ABP_TIGER_CONNECT <<!       
        set pages 0;
        set heading off;
        set feedback off;
        select max(BUILD_ID) 
        from ccbuilds_dbpatches
        where CC_VERSION='${VERSION}' ;
      !`
typeset -i ABP_BUILD_NUMBER=${ABP_BUILD_NUMBER_S}

ABP_REF_DMP=`sqlplus -s $ABP_TIGER_CONNECT <<!       
        set pages 0;
        set heading off;
        set feedback off;
        select OPT1 
        from ccbuilds_dbpatches
        where  BUILD_ID='${ABP_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`

ABP_DB_PATCH_S=`sqlplus -s $ABP_TIGER_CONNECT <<!  
        set pages 0;
        set heading off;
        set feedback off;
        select PATCH_ID 
        from ccbuilds_dbpatches
        where  BUILD_ID='${ABP_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`

typeset -i ABP_DB_PATCH=${ABP_DB_PATCH_S}


#OMS INFO

OMS_BUILD_NUMBER_S=`sqlplus -s $OMS_TIGER_CONNECT <<!       
        set pages 0;
        set heading off;
        set feedback off;
        select max(BUILD_ID) 
        from ccbuilds_dbpatches
        where CC_VERSION='${VERSION}' ;
      !`

typeset -i OMS_BUILD_NUMBER=${OMS_BUILD_NUMBER_S}

OMS_PC_DMP=`sqlplus -s $OMS_TIGER_CONNECT <<!       
        set pages 0;
        set heading off;
        set feedback off;
        select OPT1 
        from ccbuilds_dbpatches
        where  BUILD_ID='${OMS_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`

OMS_AIF_DMP=`sqlplus -s $OMS_TIGER_CONNECT <<!       
        set pages 0;
        set heading off;
        set feedback off;
        select OPT2 
        from ccbuilds_dbpatches
        where  BUILD_ID='${OMS_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`

OMS_DB_PATCH_S=`sqlplus -s $OMS_TIGER_CONNECT <<!       
        set pages 0;
        set heading off;
        set feedback off;
        select PATCH_ID 
        from ccbuilds_dbpatches
        where  BUILD_ID='${OMS_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`

typeset -i OMS_DB_PATCH=${OMS_DB_PATCH_S}

#OPX INFO
OPX_BUILD_NUMBER_S=`sqlplus -s $SE_TIGER_CONNECT <<!       
        set pages 0;
        set heading off;
        set feedback off;
        select max(BUILD_ID) 
        from ccbuilds_dbpatches
        where CC_VERSION='${VERSION}' ;
      !`

typeset -i OPX_BUILD_NUMBER=${OPX_BUILD_NUMBER_S}

SLR_DMP=`sqlplus -s $SE_TIGER_CONNECT <<!       
        set pages 0;
        set heading off;
        set feedback off;
        select OPT1 
        from ccbuilds_dbpatches
        where  BUILD_ID='${OPX_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`

OPX_DB_PATCH_S=`sqlplus -s $SE_TIGER_CONNECT <<!       
        set pages 0;
        set heading off;
        set feedback off;
        select PATCH_ID 
        from ccbuilds_dbpatches
        where  BUILD_ID='${OPX_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`
typeset -i OPX_DB_PATCH=${OPX_DB_PATCH_S}


#AMSS
AMSS_BUILD_NUMBER_S=`sqlplus -s $AMSS_TIGER_CONNECT <<!
        set pages 0;
        set heading off;
        set feedback off;
        select max(BUILD_ID)
        from ccbuilds_dbpatches
        where CC_VERSION='${VERSION}' ;
      !`

typeset -i AMSS_BUILD_NUMBER=${AMSS_BUILD_NUMBER_S}

AMSS_SEC_DMP=`sqlplus -s $AMSS_TIGER_CONNECT <<!
        set pages 0;
        set heading off;
        set feedback off;
        select OPT1
        from ccbuilds_dbpatches
        where  BUILD_ID='${AMSS_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`

AMSS_DB_PATCH_S=`sqlplus -s $AMSS_TIGER_CONNECT <<!
        set pages 0;
        set heading off;
        set feedback off;
        select PATCH_ID
        from ccbuilds_dbpatches
        where  BUILD_ID='${AMSS_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`
typeset -i AMSS_DB_PATCH=${AMSS_DB_PATCH_S}

APX_SE_DMP=`sqlplus -s $AMSS_TIGER_CONNECT <<!
        set pages 0;
        set heading off;
        set feedback off;
        select OPT2
        from ccbuilds_dbpatches
        where  BUILD_ID='${AMSS_BUILD_NUMBER}' and CC_VERSION='${VERSION}' ;
      !`


V#CRM_STORAGE_ICM_BNUM=`grep ICM.build.number=${i_ICM} /XPISTORAGE/${VERSION}/CRM/$CRM_STORAGE/packages/crm_build.number | tail -1 | awk -F'/' '{print $5}'`
CRM_DMP_LOCATION="/XPISTORAGE/${VERSION}/CRM/${CRM_STORAGE}/crm.dmp.gz"
CRM_DMP=`ls -l ${CRM_DMP_LOCATION} | awk -F'>' '{print $NF}'`

#kovas i_ICM

echo "<tr bgcolor='A5D5E2'>"
echo "<td <b> ABP </b> </td>"
echo "<td ${ABP_DB_PATCH} </td>"
echo "<td> REFERENCE </td>"
echo "<td> ${ABP_REF_DMP} </td>"
echo "</tr> "

echo "<tr bgcolor='D2EAF1'>"
echo "<td rowspan="3"> <b> OMS </b> </td>"
echo "<td rowspan="3"> ${OMS_DB_PATCH} </td>"
echo "</tr> "
echo "<tr bgcolor='D2EAF1'>"
echo "<td> PC </td>"
echo "<td> ${OMS_PC_DMP} </td>"
echo "</tr> "
echo "<tr bgcolor='D2EAF1'>"
echo "<td> AIF </td>"
echo "<td> ${OMS_AIF_DMP} </td>"
echo "</tr> "

echo "<tr bgcolor='A5D5E2'>"
echo "<td> <b> CRM </b> </td>"
echo "<td> NA </td>"
echo "<td> REFERENCE </td>"
echo "<td>/XPISTORAGE/${VERSION}/CRM/${CRM_STORAGE}/${CRM_DMP} </td>"
echo "</tr> "

echo "<tr bgcolor='D2EAF1'>"
echo "<td> <b> SLROMS </b> </td>"
echo "<td> ${OPX_DB_PATCH} </td>"
echo "<td> REFERENCE(SE) &nbsp;&nbsp;</td>"
echo "<td> ${SLR_DMP} </td>"
echo "</tr> "

echo "<tr bgcolor='D2EAF1'>"
echo "<td> <b> SLRAMS </b> </td>"
echo "<td> ${APX_SE_DMP} </td>"
echo "<td> REFERENCE(SE) &nbsp;&nbsp;</td>"
echo "<td> </td>"
echo "</tr> "

echo "<tr bgcolor='A5D5E2'>"
echo "<td> <b> AMSS </b> </td>"
echo "<td> ${AMSS_DB_PATCH} </td>"
echo "<td> </td>"
echo "<td> </td>"
echo "</tr> "



}

#########################################################################
#
#showGeneralInformation
#
#########################################################################
showGeneralInformation()
{
echo "<div>"
echo "<b> AMC Tools URL: ${TOOL_URL} </b> (NT Name/Pass)"
echo "</div>"
}

#########################################################################
#
#showProductsDetails
#
#########################################################################
showProductsDetails()
{
## kovas
UNIXUSER=""
UNIXBOX=""
STORAGE=""

if [[ "${PHASE}" = "CST" ]]
then
UNIXUSER=crmwrk1
else
UNIXUSER=${PROJ_ABBR}crm${ENV_NUMBER}
fi

FindUnixBox ${ENV_NUMBER} crm ${VERSION} ${PHASE}
export CRMSMARTCLIENTURL=`ssh -q ${UNIXUSER}@${UNIXBOX} -n " . ./.profile 2>/dev/null | grep 'CRM JNLP URL' | cut -d ' ' -f9"`

echo "<div>"
echo "<b> ${CRMSMARTCLIENTURL}  , Login: Asmsa1/Asmsa1</b>"
echo "<br>"

if [[ "${PHASE}" = "CST" ]]
then
UNIXUSER=omswrk1
else
UNIXUSER=${PROJ_ABBR}oms${ENV_NUMBER}
fi

FindUnixBox ${ENV_NUMBER} oms ${VERSION} ${PHASE}
export OMSSMARTCLIENTURL=`ssh -q ${UNIXUSER}@${UNIXBOX} -n " . ./.profile 2>/dev/null | grep 'LAUNCH URL' | cut -d '=' -f2"`

echo "<div>"
echo "<b> OMS Launch URL : ${OMSSMARTCLIENTURL}  , Login: Asmsa1/Asmsa1</b>"
echo "<br>"

if [[ "${PHASE}" = "CST" ]]
then
	UNIXUSER=slroms1
else
	UNIXUSER=vivslo${ENV_NUMBER}
fi

FindUnixBox ${ENV_NUMBER} slroms ${VERSION} ${PHASE}
export SLRURL=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ' . ./.profile 2>/dev/null ; alias | grep solrlink  | cut -d "\"" -f2'`
echo "<b> SLR URL: ${SLRURL} </b>"
echo "<br>"
echo "</div>"
}

#############################################################
#
#showServerStatus
#
#########################################################
showServerStatus() 
{
PRODUCT=`echo ${1} | tr '[A-Z]' '[a-z]'`
UNIXUSER=""
UNIXBOX=""
STORAGE=""

case ${PRODUCT} in
        abp)
                UNIXUSER=${PROJ_ABBR}abp${ENV_NUMBER}
                PRODUCT='enb'
                ;;
       amss)
                UNIXUSER=vivmcs${ENV_NUMBER}
                ;;
       slroms)
                UNIXUSER=vivslo${ENV_NUMBER}
                ;;
       slrams)
                UNIXUSER=vivsla${ENV_NUMBER}
                ;;
       *)
                UNIXUSER=${PROJ_ABBR}${PRODUCT}${ENV_NUMBER}
                ;;
esac

if [[ "${PHASE}" = "CST" ]]
then
        if [[ "${PRODUCT}" = "enb" ]]
        then
                UNIXUSER=abpwrk1
       	elif [[ "${PRODUCT}" = "amss" ]] 
		then
				UNIXUSER=amswrk1
		elif [[ "${PRODUCT}" = "slroms" ]]
        then
                UNIXUSER=slroms1
        elif [[ "${PRODUCT}" = "slrams" ]]
        then
                UNIXUSER=slrams1
        else
                UNIXUSER=${PRODUCT}wrk1
        fi
fi


FindUnixBox ${ENV_NUMBER} ${PRODUCT} ${VERSION} ${PHASE}
case $1 in
        ABP)    SERVER_STATUS=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ; cd ${abpScriptPath} ; ${abpPingScript}"`
                ;;
        CRM)    SERVER_STATUS=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ; cd ${crmScriptPath} ; ./${crmPingScript}"`
                ;;
        OMS)    SERVER_STATUS=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ; cd ${omsScriptPath} ; ./${omsPingScript}"`
       			;; 
        SLROMS)    SERVER_STATUS=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ; cd ${slrScriptPath} ; ./${slrPingScript}" `
               	;;
        SLRAMS)    SERVER_STATUS=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ; cd ${slraScriptPath} ; ./${slraPingScript}" `
               	;;
		AMSS)	
		SERVER_STATUS=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ; cd ${amssScriptPath} ; ./${amssPingScript}" | cut -d" " -f1`
		AMSS_SERVER_STATUS=`echo $SERVER_STATUS`
				;;
	*)      echo "please give product Name"
                exit 1
                ;;
esac

echo "<tr>"
echo "<td bgcolor='4BACC6'> <b> `echo ${PRODUCT} | tr '[a-z]' '[A-Z]'` </b> </td> "
if [ "${SERVER_STATUS}" == "DOWN" ]
then
    echo "<td bgcolor='red'> DOWN </td>"
else
    echo "<td bgcolor='04B404'> UP </td>"
fi

LOG_STATUS=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ; ${SCRIPTHOMEDIR}/checkWebLogicLog.ksh ${PRODUCT}"`
    if [ "$?" == "0" ]
    then
        echo "<td bgcolor='04B404'> ${LOG_STATUS} </td>"
    else
        echo "<td bgcolor='yellow'> ${LOG_STATUS} </td>"
    fi

echo "	</tr> "

}


#################################################################
#
#showDaemonStatus
#
#################################################################
showDaemonStatus()
{

DAEMONNAME=${1}
findExe=${2}

if [[ "${PHASE}" = "CST" ]]
then
UNIXUSER=abpwrk1
else
#UNIXUSER=${PROJ_ABBR}wrk${ENV_NUMBER}
UNIXUSER=${PROJ_ABBR}abp${ENV_NUMBER}
fi

FindUnixBox ${ENV_NUMBER} enb ${VERSION} ${PHASE}

st=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ; ps -fu ${UNIXUSER} | grep '${findExe}' |grep -v grep |wc -l"`

if [ "`expr ${ROWNUMBER} % 2 `" == "0" ]
then
        echo "<tr bgcolor='A5D5E2'>"
else
        echo "<tr bgcolor='D2EAF1'>"
fi
echo "<td> <b> ${DAEMONNAME} </b> </td>"
if [ $st -ne 1 ]
then
     echo " <td bgcolor='red'> DOWN </td>"
else
     echo " <td bgcolor='04B404'> UP </td>"
fi
echo "	</tr>"

ROWNUMBER=`expr ${ROWNUMBER} + 1`
}

########################################################################
#
#showProductHfs
#
#################################################################
showProductHfs()
{

PRODUCT=`echo ${1} | tr '[A-Z]' '[a-z]'`
UNIXUSER=""
UNIXBOX=""

case ${PRODUCT} in
        abp)
                #UNIXUSER=${PROJ_ABBR}wrk${ENV_NUMBER}
                UNIXUSER=${PROJ_ABBR}abp${ENV_NUMBER}
                PRODUCT='enb'
                ;;
        amss)
                UNIXUSER=vivmcs${ENV_NUMBER}
                ;;
        slroms)
                UNIXUSER=vivslo${ENV_NUMBER}
                ;;
        slrams)
                UNIXUSER=vivsla${ENV_NUMBER}
                ;;
        *)
                UNIXUSER=${PROJ_ABBR}${PRODUCT}${ENV_NUMBER}
                ;;
esac

if [[ "${PHASE}" = "CST" ]]
then
        if [[ "${PRODUCT}" = "enb" ]]
        then
                UNIXUSER=abpwrk1
        elif [[ "${PRODUCT}" = "amss" ]]
        then
                UNIXUSER=amswrk1
        elif [[ "${PRODUCT}" = "slroms" ]]
        then
                UNIXUSER=slroms1
        elif [[ "${PRODUCT}" = "slrams" ]]
        then
                UNIXUSER=slrams1
        else
                UNIXUSER=${PRODUCT}wrk1
        fi
fi


FindUnixBox ${ENV_NUMBER} ${PRODUCT} ${VERSION} ${PHASE}


if [[ "${PHASE}" = "CST" ]]
then
hflist=`sqlplus -s ${AMCDBString} << EOF
set hea off feed off pagesize 0
select unique unique_id 
from   HOTFIX_EVT 
where  ENVIRONMENT   = '${UNIXUSER}@${UNIXBOX}' 
and    EVENT_NAME    = 'DEPLOYED'; 
exit;
EOF`
else
hflist=`sqlplus -s ${AMCDBString} << EOF
set hea off feed off pagesize 0
select unique unique_id 
from   HOTFIX_EVT 
where  ENVIRONMENT   = '${UNIXUSER}@${UNIXBOX}' 
and    EVENT_NAME    = 'DEPLOYED' 
and    CREATION_DATE >= (select REFRESH_DATE 
                         from   HOTFIX_ENVIRONMENTS 
                         where  ENVIRONMENT = '${UNIXUSER}@${UNIXBOX}');
exit;
EOF`

fi

for hf_number in ${hflist}
do
    if [ "`expr ${ROWNUMBER} % 2 `" == "0" ]
    then
        echo "<tr bgcolor='A5D5E2'>"
    else
        echo "<tr bgcolor='D2EAF1'>"
    fi
    echo "<td> `echo ${PRODUCT} | tr '[a-z]' '[A-Z]'` </td>" 
    echo "<td> ${hf_number} </td>"
    echo "</tr>"
    ROWNUMBER=`expr ${ROWNUMBER} + 1`
done

}

########################################################################
#
#showABPURLInformation
#
#################################################################
showABPURLInformation()
{

if [[ "${PHASE}" = "CST" ]]
then
UNIXUSER=abpwrk1
else
#UNIXUSER=${PROJ_ABBR}wrk${ENV_NUMBER}
UNIXUSER=${PROJ_ABBR}abp${ENV_NUMBER}
fi

FindUnixBox ${ENV_NUMBER} enb ${VERSION} ${PHASE}

ssh -q ${UNIXUSER}@${UNIXBOX} -n " . ./.profile >/dev/null 2>&1 ; ${SCRIPTHOMEDIR}/showABPURLInformation.ksh "

}
########################################################################
#
#showEnvironmentIntegrationDetails
#
#################################################################
showEnvironmentIntegrationDetails()
{

if [[ "${PHASE}" = "CST" ]]
then
UNIXUSER=omswrk1
else
UNIXUSER=${PROJ_ABBR}oms${ENV_NUMBER}
fi

FindUnixBox ${ENV_NUMBER} oms ${VERSION} ${PHASE}

ssh ${UNIXUSER}@${UNIXBOX} ". ./.profile >/dev/null 2>&1 ; ${SCRIPTHOMEDIR}/showIntegrationValuesHtml.ksh "

}

########################################################################
#
#generateEmailContent
#
#################################################################
generateEmailContent()
{
echo "<html>"
echo "<body>"
echo "Hi All," 
echo "<br>"
echo "<br>"
echo "<strong> <em> <h2> ICM Environment #${ENV_NUMBER} refreshed successfully with the following details: </strong> </em> </h2>"
echo "<br>"
if [[ "${IS_GOLDEN}" = "Y" ]]
then
	echo "<strong> <em> <h3> *** Please note that for BootManager and EnSight the environment code name is same as Server name </strong> </em> </h3>"
	echo "<br>"
fi
echo "<b> <u>General Information:</u> </b> "

  showGeneralInformation
  #showCRMSmartClientDetails crm
  showProductsDetails
echo "<br>"
echo "<br>"
echo "<b> <u>ICM Environment Details:</u> </b> "
ROWNUMBER=0
echo "<table border='1' > <b>"
echo "<tr bgcolor='4BACC6'>"
echo "	<td> Product </td>"
echo "	<td> User/Password </td>"
echo "	<td> Server </td>"
echo "	<td> Storage Details </td>"
echo "</tr> </b>"

  showEnvironmentDetails ABP 
  showEnvironmentDetails CRM 
  showEnvironmentDetails OMS 
  showEnvironmentDetails SLROMS 
  showEnvironmentDetails SLRAMS 
  showEnvironmentDetails AMSS 
echo "</table>"


ROWNUMBER=0
echo "<br>"
echo "<br>"
echo "<b> <u>Products Dumps Information:</u> </b> "
echo "<table border='1' > <b>"
echo "<tr bgcolor='4BACC6'>"
echo "  <td> Product &nbsp;&nbsp;</td>"
echo "  <td> Patch NO. &nbsp;&nbsp;</td>"
echo "  <td> DMP Type </td>"
echo "  <td> DMP Full Path </td>"
echo "</tr> </b>"
showEnvironmentDumps 
echo "</table>"

#echo "<b> <u>Integration With Other Modules:</u> </b>"

#  showEnvironmentIntegrationDetails
  showABPURLInformation
ROWNUMBER=0
echo "<br>"
echo "<br>"
echo "<div>"
echo "<b> <u>Servers Status:</u> </b> "
echo "<table border='1'> <b> "
echo "	<tr bgcolor='4BACC6'>"
echo "		<td> Product </td>"
echo "		<td> Status </td>"
echo "		<td> Exception in Startup </td>"	
echo "	</tr> </b>"

	showServerStatus ABP 
	showServerStatus CRM 
	showServerStatus OMS 
	showServerStatus SLROMS
	showServerStatus SLRAMS
	showServerStatus AMSS 
echo "</table>"
echo "</div>"

echo "<br>"
echo "<br>"

ROWNUMBER=0
echo "<div>"
echo "<b> <u>Daemons Status:</u> </b>"
echo "<table border='1'> <b> "
echo "	<tr bgcolor='4BACC6'>"
echo "		<td> Daemon Name </td>"
echo "		<td> Status </td>"
echo "	</tr> </b>"

	showDaemonStatus "amc1_DaemonManager"    "amc1_DmnEnvelope DmnMng"
	showDaemonStatus "ACIMANAGER"            "Ac1FtcManager"
	showDaemonStatus "TRB1ENGINE_1"          "TRB1Manager"
	showDaemonStatus "OP1MRO_1"              "amc_mro"
	showDaemonStatus "TLS1_APInvoker_1_1"    'amc1_DmnEnvelope TLS1_APInvoker_1_1'
	showDaemonStatus "TLS1_APInvoker_10_1"   'amc1_DmnEnvelope TLS1_APInvoker_10_1'
	showDaemonStatus "TLS1_APInvoker_2_1"    'amc1_DmnEnvelope TLS1_APInvoker_2_1'
	showDaemonStatus "BL1BTLSOR"             "BL1BTLSOR"
	showDaemonStatus "BTLQUOTE"              "BTLQUOTE"
	showDaemonStatus "DB2E800"              "DB2E800"
	showDaemonStatus "DB2E820"              "DB2E820"
        showDaemonStatus "ES_FR1080"             "ES_FR1080"
        showDaemonStatus "ES_FR1180"             "ES_FR1180"
        showDaemonStatus "ES_RB100"               "ES_RB100"
        showDaemonStatus "ES_RB120"             "ES_RB120"
        showDaemonStatus "ES_RB1100"               "ES_RB1100"
        showDaemonStatus "ES_RB1120"            "ES_RB1120"
        showDaemonStatus "F2E125"               "F2E125"
        showDaemonStatus "NTF827"               "NTF827"
        showDaemonStatus "UQ_SERVER400"         "UQ_SERVER400"
	
echo "</table>"
echo "</div>"

echo "<br>"
echo "<br>"
ROWNUMBER=0
echo "<div>"
echo "<b> <u>List of HF's Applied: </u></b>"
echo "<table border='1'> <b> "
echo '<tr  bgcolor="4BACC6">'
echo "<td> Product </td>"
echo "<td> Hotfix Number </td>"
echo "</tr> </b>"

	showProductHfs ABP
	showProductHfs CRM
	showProductHfs OMS
	showProductHfs SLROMS

echo "</table>"
echo "</div>"
echo "<br>"
echo "<br>"
ROWNUMBER=0
echo "<div>"
echo "</div>"
echo "</div>"
echo "<div>"
echo "Regards," 
echo "<br>"
echo "${TEAM}"
echo "</div>"
echo "</body>"
echo "</html>"

}

########################################################################
#
#prepareEmailContent
#
#################################################################

prepareEmailContent()
{
echo "From:${EMAIL_FROM} "
echo "To:${EMAIL_TO}"
echo "Cc:${EMAIL_CC}"
echo "Subject:${EMAIL_SUBJECT}"

echo "Content-Type: text/html; charset=\"us-ascii\""

generateEmailContent
}

####################################################################
#
# Main Function starts from here
#
#################################################################
IS_GOLDEN="N"

if [ $# -ne 6 ]
then
	if [ $# -ne 5 ]
	then
    		print "\n\tUSAGE : `basename $0` <Env Num(ST)|Env Id(CST)> <Version> <Phase> <Project> <SWP> [<GOLDEN>]\n"
                print "\tSample : `basename $0`  10 3000 ST VIVO 508 \n"
                print "\tSample : `basename $0`  57 3000 CST VIVO 140 GOLDEN \n"
    		exit 1
	fi
else
	IS_GOLDEN="Y"
fi

ENV_NUMBER=${1}
VERSION=${2}
PHASE=${3}
PROJECT=${4}
SWP=`echo ${5} | tr -cd '[:digit:]'`

variableDefinition
if [[ "${PHASE}" = "CST" ]]
then
UNIXUSER=crmwrk1
else
UNIXUSER=${PROJ_ABBR}crm${ENV_NUMBER}
fi

FindUnixBox ${ENV_NUMBER} crm ${VERSION} ${PHASE}

export crm_version=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cd .xpi/repository/topologies; grep ST_CRM * |cut -d"/" -f4 | cut -d "_" -f3 | sed "s/B//" | uniq "`
export crm_build_number=`ssh -q ${UNIXUSER}@${UNIXBOX} -n ". ./.profile >/dev/null 2>&1 ;cd .xpi/repository/topologies; grep ST_CRM * | cut -d"/" -f6 | cut -d "_" -f4 | sed "s/B//" | uniq"`


ICM_BUILD=`grep "ICM.build.number" /XPISTORAGE/BUILD_RELEASE/CRM/v${crm_version}/64OG/BN_${crm_build_number}/crm_build.number | cut -d '=' -f2 | head -1`

#ICM_BUILD=`ssh -q ${UNIXUSER}@${UNIXBOX} -n " . ./.profile 2>/dev/null | grep 'The ICM build number in this environment' | cut -d ':' -f2"`
typeset -i i_ICM=${ICM_BUILD}
if [[ "${IS_GOLDEN}" = "N" ]]
then
	EMAIL_SUBJECT="VIVO V${VERSION} SWP#${SWP} ICM Build#${i_ICM} Env #${ENV_NUMBER} - Release Environment Report"
else
	EMAIL_SUBJECT="VIVO V${VERSION} SWP#${SWP} ICM Build#${i_ICM} Env #${ENV_NUMBER} - Release IaaS Golden Environment Report"
fi

#prepareEmailContent
prepareEmailContent | /usr/sbin/sendmail -t

exit 0
