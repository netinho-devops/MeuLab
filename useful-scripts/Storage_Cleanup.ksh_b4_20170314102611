#!/bin/ksh -u
##################################### INIT  SECTION ###############################
# NAME        : Storage_Cleanup.ksh
# DESCRIPTION : Find unused storage that created more than 5 days ago and removed it
#
# STEPS:      : 1. Get Input and validate it
#               2. Find the EnSight DB the stoarge name of which each env is used
#               3. Find the all storage name of giving product.
#               6. Remove un used stoarge
#               7. Remove it form Genesis DB
#               8. Check FS
#
# USAGE       : Storage_Cleanup.ksh <Product Name> [-r]
# DATE        : 17-AUG-15
# Created By  : Eitan Corech
# Edited By   : Pedro Pavan
######################################################################################

###################################
####                           ####
####       P A R A M S         ####
####                           ####
###################################
DAYS_OLD_DEFAULT=20
DAYS_OLD_V3000=5
DAYS_OLD_V3100=15
DAYS_OLD_V9000=15
FS_ALERT=90
FILE_USED_STORAGE=$(mktemp $0.XXXXXXXXX.tmp)
TOOLS_DB=${TOOLS_DB_USER}/${TOOLS_DB_PASSWORD}@${TOOLS_DB_INSTANCE}
LOG="${HOME}/users/pedrop/$(basename $0).log"
echo -e "\n$(date)" >> ${LOG}

###################################
####                           ####
####    F U N C T I O N S      ####
####                           ####
###################################
function fs_check {
	FS_USED=$(df -h /XPISTORAGE/ | tail -1 | awk '{ print $5 }' | tr -d '%')
	FS_AVILABLE=$(df -h /XPISTORAGE/ | tail -1 | awk '{ print $4 }' | tr -d '%')

	if [ ${FS_USED} -ge ${FS_ALERT} ]; then
		echo -e "ALERT:\t/XPISTORAGE is using ${FS_USED}% with ${FS_AVILABLE} available"
		# send email TODO
	else
		echo -e "INFO:\t/XPISTORAGE is using ${FS_USED}% with ${FS_AVILABLE} available"
	fi
}

function ScriptExit {
	STATUS=$1

	print "\n*----------------------------------------------------------------------*"
	if [ $STATUS -eq 0 ]
	then
	   print "      Cleanup Storage  -       Ended      - " `/bin/date  '+%d/%m/%Y %H:%M:%S'`
	else
	   print "      Cleanup Storage  - Ended with Error - " `/bin/date  '+%d/%m/%Y %H:%M:%S'`
	fi
	print "*----------------------------------------------------------------------*\n"

	rm -f ${FILE_USED_STORAGE}
	exit $STATUS
}

###################################
####                           ####
####          M A I N          ####
####                           ####
###################################
if [ $# -eq 0 ]
then
    print "\n\tUSAGE : `basename $0` <Product Name> [-r]"
    print "\tSample : `basename $0` CRM [-r]\n"
    exit 1
fi

if [ "$2" == "-r" ]; then
	IS_REPORT="Y"
else
	IS_REPORT="N"
fi 

PRODUCT=`echo $1 | tr '[:lower:]' '[:upper:]'`

print "\n*--------------------------------------------------------------*"
print "       Cleanup Storage - Started - " `/bin/date  '+%d/%m/%Y %H:%M:%S' `
print "*--------------------------------------------------------------*\n"

# -------------------------------------------------------------------------------------------------
print "Step #1 - Check input"
print "====================="

CHECK_PRODUCT=`echo "set head off feed off pagesize 0
                     select count(PRODUCT)
                     from   ENSPOOL
                     where  PRODUCT='${PRODUCT}';" | sqlplus -s $TOOLS_DB` 
               
if [ $CHECK_PRODUCT -eq 0 ]
then
    CHECK_PRODUCT=`echo "set head off feed off pagesize 0
                   select distinct PRODUCT from ENSPOOL; " | sqlplus -s $TOOLS_DB` 

    print "ERROR: Product ${PRODUCT} is not supported."
    print "       Please use one of the following products: \c"
    for PRD in $CHECK_PRODUCT
    do
       print "$PRD \c"
    done 
    print
    ScriptExit 1
fi
print "Input is OK. \n"


# -------------------------------------------------------------------------------------------------
print "Step #2 - Find all used storage for the product in EnSight DB"
print "============================================================="

case ${PRODUCT} in
     ABP)		STORAGE_PROPERTY="SoftwareStorageName" ;;
     CRM)		STORAGE_PROPERTY="SoftwareVersion" ;;
     OMS)		STORAGE_PROPERTY="SoftwareVersion" ;;
     AMSS)		STORAGE_PROPERTY="SoftwareVersion" ;;
     SLROMS)	STORAGE_PROPERTY="SoftwareVersion" ;;
     SLRAMS)	STORAGE_PROPERTY="SoftwareVersion" ;;
     WSF)		STORAGE_PROPERTY="SoftwareVersion" ;;
	 OMNI)		STORAGE_PROPERTY="SoftwareVersion" ;;
     *)			echo "No info on ${PRODUCT} used storages" && ScriptExit 2 ;;
esac

print "
set head off feed off pagesize 0
select distinct VALUE 
  from ENSPOOL
 where PROPERTY = '${STORAGE_PROPERTY}' 
   and PRODUCT  = '${PRODUCT}' order by VALUE;
" | sqlplus -s $TOOLS_DB > ${FILE_USED_STORAGE}
egrep '^ST_' ${FILE_USED_STORAGE}

# -------------------------------------------------------------------------------------------------
print "\nStep #3 - Find all storages (${PRODUCT})"
print "========================================================="
printf "%-30s%-30s\n%-30s%-30s\n" "Storage Name" "Creation Date" "============" "============="
ALL_STORAGE_TEMP=`ls -1d /XPISTORAGE/*/*/ST_* | grep "_${PRODUCT}_"`
ALL_STORAGE=""

for STRG in $ALL_STORAGE_TEMP
do
   GEN_STORAGE=$(echo ${STRG} | awk -F '/' '{ print $NF }')
   STORAGE_VERSION=$(echo ${GEN_STORAGE} | cut -d '_' -f 3 | tr -d '[A-Z]')

   case ${STORAGE_VERSION} in
   	   3000) DAYS_OLD_TO_DEL=${DAYS_OLD_V3000}	;;
   	   3100) DAYS_OLD_TO_DEL=${DAYS_OLD_V3100}	;;
   	   9000) DAYS_OLD_TO_DEL=${DAYS_OLD_V9000}	;;
	   *)    DAYS_OLD_TO_DEL=${DAYS_OLD_DEFAULT}	;;
   esac
	
   # Check the storage creation date in Genesis DB
   CREATION_DATE=`echo "set head off feed off pagesize 0
                  select distinct max(SYS_CREATION_DATE)
                  from            GNS_STORAGE_REGISTRATION
                  where           STORAGE_NAME='${GEN_STORAGE}'; "              | sqlplus -s $TOOLS_DB` 

   if [ "${CREATION_DATE}" = "" ]
   then
		GNS_CREATION_DATE=$(date -d "$(stat -c "%x" ${STRG} | awk '{ print $1 }')" +'%d-%b-%y' | tr '[a-z]' '[A-Z]')
		CREATION_DATE=${GNS_CREATION_DATE}
   fi
   
   DIFF_DATE=`echo "set head off feed off pagesize 0
              SELECT TRUNC((SYSDATE - TO_DATE('$CREATION_DATE')))
              FROM    DUAL;" | sqlplus -s $TOOLS_DB` 

   if [ ${DIFF_DATE} -gt ${DAYS_OLD_TO_DEL} ]
   then           
         ALL_STORAGE=${ALL_STORAGE}" "${GEN_STORAGE}
         printf "%-30s%-30s%-10s\n" ${GEN_STORAGE} ${CREATION_DATE} ${DIFF_DATE}
   fi 
done


# -------------------------------------------------------------------------------------------------
print "\nStep #4 - Find all storages (${PRODUCT}) which are old and not in use"
print "=========================================================================="

DEL_NUM=0

for STRG in $ALL_STORAGE
do
    if [ $(grep -wc ${STRG} ${FILE_USED_STORAGE}) -eq 0 ];  then   
        STG_LOCATION=`ls -1d /XPISTORAGE/*/*/ST_* | grep -w ${STRG}`
 		STG_BUILD=$(echo $STRG | cut -d '_' -f 4 | tr -d '[A-Z]')
   		STG_VERSION=$(echo $STRG | cut -d '_' -f 3 | tr -d '[A-Z]')
		REFRAME_STORAGE_NAME="ST_${PRODUCT}_V${STG_VERSION}_B${STG_BUILD}"
		if [ $(grep -c ${REFRAME_STORAGE_NAME} ${FILE_USED_STORAGE}) -gt 0 ]; 
		then
        	echo "rm -rf $STG_LOCATION"
		else
		#if [[ $(echo ${STG_VERSION}| tr "[:upper:]" "[:lower:]") ]]; then
		if [[ "$(echo ${STG_VERSION}| tr '[:upper:]' '[:lower:]')" == "1701" ]]; then
			if [[ "${PRODUCT}" == "SLR"* ]]; then
				STG_RELEASE="NA"
			else
				STG_RELEASE=$(echo /XPISTORAGE/BUILD_RELEASE/${PRODUCT}/v${STG_VERSION}/*/BN_${STG_BUILD})
			fi

			if [ "${IS_REPORT}" == "Y" ]; then
	    		echo -e "Should be deleted (storage) : ${STG_LOCATION}" | tee -a ${LOG}
	        	echo -e "Should be deleted (release) : ${STG_RELEASE}" | tee -a ${LOG}
				echo -e "Should be deleted (database): delete GNS_STORAGE_REGISTRATION where STORAGE_NAME='${STRG}'\n" | tee -a ${LOG}
			else
				print "Removing Storage ${STRG}" | tee -a ${LOG}
				if [[ "${PRODUCT}" != "SLR"* ]]; then
					if [[ -e "${STG_RELEASE}" ]]; then 
						rm -rf ${STG_RELEASE}
						echo "rm -rf ${STG_RELEASE}" | tee -a ${LOG}
					fi
				fi

				ANT_HOME="/vivnas/viv/vivtools/GENESIS/ant1.9.4"
				GENESIS_HOME="/vivnas/viv/vivtools/GENESIS/${STG_VERSION}"
				GENESIS_BE_HOME="/vivnas/viv/vivtools/GENESIS/genesis_BE"
				
				if [[ "$PRODUCT" == "ABP" ]]; then
					PRODUCT=enb
				fi
				${ANT_HOME}/bin/ant -f ${GENESIS_BE_HOME}/build.xml delete_old_storage -DGENESIS_HOME=${GENESIS_HOME} -Dcc.ver=${STG_VERSION} -Dproduct=$(echo ${PRODUCT}| tr "[:upper:]" "[:lower:]") -Dbuild.number=${STG_BUILD} | tee -a ${LOG}
				
				if [[ -d "${STG_LOCATION}" ]]; then
					rm -rf ${STG_LOCATION} 2> /dev/null
					echo "rm -rf ${STG_LOCATION}" | tee -a ${LOG}
				fi
				
				print "Storage ${STRG} removed." | tee -a ${LOG}
			fi
			DEL_NUM=$((DEL_NUM+1))
		fi
   		fi
	fi
done     

if [ $DEL_NUM -eq 0 ]; then
	print "There is no storage to remove. All storages are in use." | tee -a ${LOG}
fi


# -------------------------------------------------------------------------------------------------
print "\nStep #5 - Generate report"
print "=========================================================================="
HTML_FILE="xpistorage.html"

fs_check
ScriptExit 0
